<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richie</title>
  
  
  <link href="https://qiaimhigh.gothub.io/atom.xml" rel="self"/>
  
  <link href="https://qiaimhigh.gothub.io/"/>
  <updated>2022-05-29T13:17:21.773Z</updated>
  <id>https://qiaimhigh.gothub.io/</id>
  
  <author>
    <name>Richie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://qiaimhigh.gothub.io/2022/05/29/cors/"/>
    <id>https://qiaimhigh.gothub.io/2022/05/29/cors/</id>
    <published>2022-05-29T08:49:00.694Z</published>
    <updated>2022-05-29T13:17:21.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cors解决跨域"><a href="#Cors解决跨域" class="headerlink" title="Cors解决跨域"></a>Cors解决跨域</h1><h2 id="一、为什么会出现跨域"><a href="#一、为什么会出现跨域" class="headerlink" title="一、为什么会出现跨域"></a>一、为什么会出现跨域</h2><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p><h2 id="二、什么是跨域"><a href="#二、什么是跨域" class="headerlink" title="二、什么是跨域"></a>二、什么是跨域</h2><p>当一个请求的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p><table><thead><tr><th align="center">当前页面url</th><th>被请求页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td align="center"><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td align="center"><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td>跨域</td><td>协议不同</td></tr><tr><td align="center"><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同</td></tr><tr><td align="center"><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://blog.test.com/">http://blog.test.com/</a></td><td>跨域</td><td>子域名不同</td></tr><tr><td align="center"><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td>跨域</td><td>端口号不同</td></tr></tbody></table><h2 id="三、非同源限制"><a href="#三、非同源限制" class="headerlink" title="三、非同源限制"></a>三、非同源限制</h2><ul><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 AJAX 请求</li></ul><h2 id="四、解决办法"><a href="#四、解决办法" class="headerlink" title="四、解决办法"></a>四、解决办法</h2><h3 id="1、CORS"><a href="#1、CORS" class="headerlink" title="1、CORS"></a>1、CORS</h3><p>CORS 是跨域资源分享（Cross-Origin Resource Sharing）的缩写。它是 W3C 标准，属于跨源 AJAX 请求的根本解决方法。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>浏览器将CORS跨域请求分为简单请求和非简单请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">简单请求:(需同时满足以下两点)</span><br><span class="line">                1.请求的方式只能是GET,POST,HEAD</span><br><span class="line">                2.HTTP请求头是：</span><br><span class="line">                    Accept</span><br><span class="line">                    Accept-Language</span><br><span class="line">                    Content-Language</span><br><span class="line">                    Content-Type: 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</span><br><span class="line">不同时满足上面的两个条件，就属于非简单请求。浏览器对这两种的处理，是不一样的。</span><br><span class="line"></span><br><span class="line">非简单请求:(满足任意一点)</span><br><span class="line">                1.请求方式为除GET,POST,HEAD之外的Method类型</span><br><span class="line">                2.请求头包含自定义头端</span><br><span class="line">                3.向服务器发送了application/json格式的数据  </span><br><span class="line">   非简单请求在请求CROS时，会在正式通信之前，增加一次HTTP查询请求，称为预检请求。</span><br><span class="line">简单、非简单请求的区别:简单请求之发送一次请求,预检请求发送两次请求,在发送之前会先发送一次OPTION的与请求,与请求成功之后才会发送实际的请求和数据 </span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.CORS主要是在服务端进行配置，客户端浏览器无需做任何配置，即可请求开启了CORS的接口</span><br><span class="line"></span><br><span class="line">2.CORS在浏览器中有兼容性</span><br><span class="line"></span><br><span class="line">3.CORS默认情况下只支持GET、POST、HEAD，如果客户端希望通过PUT\DELETE等方式请求服务器资源,则须通过Access-Control-Allow-Methods来指明实际请求所允许的HTTP方法</span><br><span class="line">res.setHEader(&#x27;Access-Control-Allow- Methods&#x27;,&#x27;POST,GET,DELETE,HEAD&#x27;)</span><br><span class="line">或者</span><br><span class="line">res.setHEader(&#x27;Access-Control-Allow-Methods&#x27;,*)</span><br></pre></td></tr></table></figure><h4 id="前端解决"><a href="#前端解决" class="headerlink" title="前端解决"></a>前端解决</h4><ol><li><p>原生Ajax（需和后端一起使用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://www.domain2.com:8080/login&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;user=admin&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>jQuery Ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="attr">xhrFields</span>: &#123;</span><br><span class="line">       <span class="attr">withCredentials</span>: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">crossDomain</span>: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-vue框架"><a href="#3-vue框架" class="headerlink" title="3.vue框架"></a>3.vue框架</h4><p>a.) axios设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>b.) vue-resource设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">http</span>.<span class="property">options</span>.<span class="property">credentials</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="服务端解决"><a href="#服务端解决" class="headerlink" title="服务端解决"></a>服务端解决</h4><ol><li><p>Nodejs（Express，前端无需设置任何东西即可解决）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CORS（主流方案）:cors是express提供的第三方库，通过安装和配置cors中间件，可以很方便的解决跨域问题</span></span><br><span class="line"><span class="comment">            由一系列HTTP的响应头组成，这些HTTP响应头决定浏览器是否阻止前端JS代码跨域获取资源</span></span><br><span class="line"><span class="comment">步骤：</span></span><br><span class="line"><span class="comment">1.安装： npm i cors</span></span><br><span class="line"><span class="comment">    2.导入中间件 const cors = require(&quot;cors&quot;)</span></span><br><span class="line"><span class="comment">3. 配置中间件 app.use(&quot;cors()&quot;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置cros跨域请求中间件</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;./api&#x27;</span>)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/jsonp&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fuName = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;<span class="attr">name</span>:<span class="string">&#x27;黎明&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> str =  <span class="string">`<span class="subst">$&#123;fuName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">    res.<span class="title function_">send</span>(str)</span><br><span class="line">&#125;) </span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,api)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Error&#x27;</span>+err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://localhost&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="原生Node（需和前端一起使用）"><a href="#原生Node（需和前端一起使用）" class="headerlink" title="原生Node（需和前端一起使用）"></a>原生Node（需和前端一起使用）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 数据块接收中</span></span><br><span class="line">    req.<span class="title function_">addListener</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">chunk</span>) &#123;</span><br><span class="line">        postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 数据接收完毕</span></span><br><span class="line">    req.<span class="title function_">addListener</span>(<span class="string">&#x27;end&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        postData = qs.<span class="title function_">parse</span>(postData);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 跨域后台设置</span></span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,     <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">            <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;http://www.domain1.com&#x27;</span>,    <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">             * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="string">&#x27;Set-Cookie&#x27;</span>: <span class="string">&#x27;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#x27;</span>  <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        res.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(postData));</span><br><span class="line">        res.<span class="title function_">end</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running at port 8080...&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://segmentfault.com/a/1190000011145364">跨域解决参考链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Cors解决跨域&quot;&gt;&lt;a href=&quot;#Cors解决跨域&quot; class=&quot;headerlink&quot; title=&quot;Cors解决跨域&quot;&gt;&lt;/a&gt;Cors解决跨域&lt;/h1&gt;&lt;h2 id=&quot;一、为什么会出现跨域&quot;&gt;&lt;a href=&quot;#一、为什么会出现跨域&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://qiaimhigh.gothub.io/2022/05/29/vue/"/>
    <id>https://qiaimhigh.gothub.io/2022/05/29/vue/</id>
    <published>2022-05-29T06:02:21.099Z</published>
    <updated>2022-04-19T11:29:49.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue3-0-setup里没有this-没有this-没有this"><a href="#vue3-0-setup里没有this-没有this-没有this" class="headerlink" title="vue3.0  setup里没有this,没有this,没有this."></a><a href="https://so.csdn.net/so/search?q=vue3.0&spm=1001.2101.3001.7020">vue3.0</a>  setup里没有this,没有this,没有this.</h1><h3 id="vue—message消息提示"><a href="#vue—message消息提示" class="headerlink" title="vue—message消息提示"></a><a href="https://www.cnblogs.com/Bluebells/p/15146567.html">vue—message消息提示</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>/<span class="string">&#x27;warning&#x27;</span>/<span class="string">&#x27;error&#x27;</span>/<span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;消息提示内容&#x27;</span>,</span><br><span class="line">    <span class="attr">showClose</span>: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">center</span>: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">dangerouslyUseHtmlString</span>: <span class="literal">true</span>/<span class="literal">false</span>      </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>type：定义消息提示框的不同状态，默认为info</p><p>message：消息提示内容</p><p>showClose：默认的message是不可以手动关闭的，如果需要手动关闭，设置showClose为true，一般与duration搭配使用</p><p>duration：显示时间, 毫秒。设为 0 则不会自动关闭，默认3000ms</p><p>center：是否居中</p><p>dangerouslyUseHTMLString：将此属性设置为true，message会被当成html片段处理</p><p><img src="https://img2020.cnblogs.com/blog/2246812/202108/2246812-20210816103718643-1049861583.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vue3-0-setup里没有this-没有this-没有this&quot;&gt;&lt;a href=&quot;#vue3-0-setup里没有this-没有this-没有this&quot; class=&quot;headerlink&quot; title=&quot;vue3.0  setup里没有this,没有thi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qiaimhigh.gothub.io/2022/05/29/hello-world/"/>
    <id>https://qiaimhigh.gothub.io/2022/05/29/hello-world/</id>
    <published>2022-05-29T05:35:53.111Z</published>
    <updated>2022-05-29T05:35:53.111Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
